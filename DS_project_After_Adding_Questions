{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "114c2b3d",
   "metadata": {},
   "source": [
    "# Import Important lib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "552522ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "55d10c8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_csv('ds_salaries.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b683f28",
   "metadata": {},
   "source": [
    "# Count missing values "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b22ccd32",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unnamed: 0          0\n",
      "work_year           0\n",
      "experience_level    0\n",
      "employment_type     0\n",
      "job_title           0\n",
      "remote_ratio        0\n",
      "company_location    0\n",
      "company_size        0\n",
      "salary_usd          0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "null_counts = df.isnull().sum()\n",
    "print(null_counts)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56e7cb37",
   "metadata": {},
   "source": [
    "# Drop missing values "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "15c353dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unnamed: 0          0\n",
      "work_year           0\n",
      "experience_level    0\n",
      "employment_type     0\n",
      "job_title           0\n",
      "remote_ratio        0\n",
      "company_location    0\n",
      "company_size        0\n",
      "salary_usd          0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "df = df.dropna()\n",
    "null_counts = df.isnull().sum()\n",
    "print(null_counts)# Import Important lib"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32fd26b1",
   "metadata": {},
   "source": [
    "# Show types of columns "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f51ae146",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unnamed: 0            int64\n",
       "work_year             int64\n",
       "experience_level     object\n",
       "employment_type       int64\n",
       "job_title            object\n",
       "remote_ratio          int64\n",
       "company_location     object\n",
       "company_size          int64\n",
       "salary_usd          float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "70e0db21",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>work_year</th>\n",
       "      <th>experience_level</th>\n",
       "      <th>employment_type</th>\n",
       "      <th>job_title</th>\n",
       "      <th>remote_ratio</th>\n",
       "      <th>company_location</th>\n",
       "      <th>company_size</th>\n",
       "      <th>salary_usd</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2023</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Principal Data Scientist</td>\n",
       "      <td>100</td>\n",
       "      <td>ES</td>\n",
       "      <td>3</td>\n",
       "      <td>97600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2023</td>\n",
       "      <td>MI</td>\n",
       "      <td>2</td>\n",
       "      <td>ML Engineer</td>\n",
       "      <td>100</td>\n",
       "      <td>US</td>\n",
       "      <td>1</td>\n",
       "      <td>30000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2023</td>\n",
       "      <td>MI</td>\n",
       "      <td>2</td>\n",
       "      <td>ML Engineer</td>\n",
       "      <td>100</td>\n",
       "      <td>US</td>\n",
       "      <td>1</td>\n",
       "      <td>25500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2023</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>100</td>\n",
       "      <td>CA</td>\n",
       "      <td>2</td>\n",
       "      <td>175000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2023</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>100</td>\n",
       "      <td>CA</td>\n",
       "      <td>2</td>\n",
       "      <td>120000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3597</th>\n",
       "      <td>3749</td>\n",
       "      <td>2021</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Data Specialist</td>\n",
       "      <td>100</td>\n",
       "      <td>US</td>\n",
       "      <td>3</td>\n",
       "      <td>165000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3598</th>\n",
       "      <td>3753</td>\n",
       "      <td>2020</td>\n",
       "      <td>EN</td>\n",
       "      <td>2</td>\n",
       "      <td>Business Data Analyst</td>\n",
       "      <td>100</td>\n",
       "      <td>US</td>\n",
       "      <td>3</td>\n",
       "      <td>100000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3599</th>\n",
       "      <td>3754</td>\n",
       "      <td>2021</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Data Science Manager</td>\n",
       "      <td>50</td>\n",
       "      <td>IN</td>\n",
       "      <td>3</td>\n",
       "      <td>98000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3600</th>\n",
       "      <td>3755</td>\n",
       "      <td>2023</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>0</td>\n",
       "      <td>CA</td>\n",
       "      <td>2</td>\n",
       "      <td>219000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3601</th>\n",
       "      <td>3756</td>\n",
       "      <td>2023</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>0</td>\n",
       "      <td>CA</td>\n",
       "      <td>2</td>\n",
       "      <td>141000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3602 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Unnamed: 0  work_year experience_level  employment_type  \\\n",
       "0              0       2023               SE                1   \n",
       "1              1       2023               MI                2   \n",
       "2              2       2023               MI                2   \n",
       "3              3       2023               SE                1   \n",
       "4              4       2023               SE                1   \n",
       "...          ...        ...              ...              ...   \n",
       "3597        3749       2021               SE                1   \n",
       "3598        3753       2020               EN                2   \n",
       "3599        3754       2021               SE                1   \n",
       "3600        3755       2023               SE                1   \n",
       "3601        3756       2023               SE                1   \n",
       "\n",
       "                     job_title  remote_ratio company_location  company_size  \\\n",
       "0     Principal Data Scientist           100               ES             3   \n",
       "1                  ML Engineer           100               US             1   \n",
       "2                  ML Engineer           100               US             1   \n",
       "3               Data Scientist           100               CA             2   \n",
       "4               Data Scientist           100               CA             2   \n",
       "...                        ...           ...              ...           ...   \n",
       "3597           Data Specialist           100               US             3   \n",
       "3598     Business Data Analyst           100               US             3   \n",
       "3599      Data Science Manager            50               IN             3   \n",
       "3600            Data Scientist             0               CA             2   \n",
       "3601            Data Scientist             0               CA             2   \n",
       "\n",
       "      salary_usd  \n",
       "0        97600.0  \n",
       "1        30000.0  \n",
       "2        25500.0  \n",
       "3       175000.0  \n",
       "4       120000.0  \n",
       "...          ...  \n",
       "3597    165000.0  \n",
       "3598    100000.0  \n",
       "3599     98000.0  \n",
       "3600    219000.0  \n",
       "3601    141000.0  \n",
       "\n",
       "[3602 rows x 9 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e52ba76",
   "metadata": {},
   "source": [
    "# Import Important lib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "baefd0f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# exp_level_map = {'SE': 1, 'MI': 2, 'EN': 3, 'EX': 4}\n",
    "\n",
    "# df['experience_level'] = df['experience_level'].replace(exp_level_map)# Import Important lib"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4dc0ab82",
   "metadata": {},
   "source": [
    "# Incoding company size and convert it to numbers "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b9eade36",
   "metadata": {},
   "outputs": [],
   "source": [
    "Csize_map = {'S': 1, 'M': 2, 'L': 3}\n",
    "df['company_size'] = df['company_size'].replace(Csize_map)# Import Important lib"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f96f4db",
   "metadata": {},
   "source": [
    "# Converting all salaries to USD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "6ddc1dc4",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'salary'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "File \u001b[1;32mD:\\data\\lib\\site-packages\\pandas\\core\\indexes\\base.py:3802\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[1;34m(self, key, method, tolerance)\u001b[0m\n\u001b[0;32m   3801\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m-> 3802\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcasted_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   3803\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
      "File \u001b[1;32mD:\\data\\lib\\site-packages\\pandas\\_libs\\index.pyx:138\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mD:\\data\\lib\\site-packages\\pandas\\_libs\\index.pyx:165\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mpandas\\_libs\\hashtable_class_helper.pxi:5745\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mpandas\\_libs\\hashtable_class_helper.pxi:5753\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'salary'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[47], line 24\u001b[0m\n\u001b[0;32m      2\u001b[0m exchange_rates \u001b[38;5;241m=\u001b[39m {\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mEUR\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;241m1.22\u001b[39m,\n\u001b[0;32m      3\u001b[0m                   \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mUSD\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;241m1.0\u001b[39m,\n\u001b[0;32m      4\u001b[0m                   \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mINR\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;241m0.014\u001b[39m,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m     20\u001b[0m                   \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mTRY\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;241m0.12\u001b[39m,\n\u001b[0;32m     21\u001b[0m                   \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mCLP\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;241m0.0014\u001b[39m}\n\u001b[0;32m     23\u001b[0m \u001b[38;5;66;03m# create a new column for salary in USD\u001b[39;00m\n\u001b[1;32m---> 24\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124msalary_usd\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[43mdf\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43msalary\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m \u001b[38;5;241m*\u001b[39m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124msalary_currency\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mmap(exchange_rates)\n",
      "File \u001b[1;32mD:\\data\\lib\\site-packages\\pandas\\core\\frame.py:3807\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   3805\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mnlevels \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m   3806\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_multilevel(key)\n\u001b[1;32m-> 3807\u001b[0m indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   3808\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[0;32m   3809\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m [indexer]\n",
      "File \u001b[1;32mD:\\data\\lib\\site-packages\\pandas\\core\\indexes\\base.py:3804\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[1;34m(self, key, method, tolerance)\u001b[0m\n\u001b[0;32m   3802\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine\u001b[38;5;241m.\u001b[39mget_loc(casted_key)\n\u001b[0;32m   3803\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[1;32m-> 3804\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[0;32m   3805\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[0;32m   3806\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[0;32m   3807\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[0;32m   3808\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[0;32m   3809\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n",
      "\u001b[1;31mKeyError\u001b[0m: 'salary'"
     ]
    }
   ],
   "source": [
    "\n",
    "# define exchange rates\n",
    "exchange_rates = {'EUR': 1.22,\n",
    "                  'USD': 1.0,\n",
    "                  'INR': 0.014,\n",
    "                  'HKD': 0.13,\n",
    "                  'CHF': 1.10,\n",
    "                  'GBP': 1.41,\n",
    "                  'AUD': 0.75,\n",
    "                  'SGD': 0.74,\n",
    "                  'CAD': 0.82,\n",
    "                  'ILS': 0.31,\n",
    "                  'BRL': 0.19,\n",
    "                  'THB': 0.031,\n",
    "                  'PLN': 0.26,\n",
    "                  'HUF': 0.0035,\n",
    "                  'CZK': 0.046,\n",
    "                  'DKK': 0.16,\n",
    "                  'JPY': 0.0090,\n",
    "                  'MXN': 0.049,\n",
    "                  'TRY': 0.12,\n",
    "                  'CLP': 0.0014}\n",
    "\n",
    "# create a new column for salary in USD\n",
    "df['salary_usd'] = df['salary'] * df['salary_currency'].map(exchange_rates)\n",
    "# Import Important lib\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "da42f5d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>work_year</th>\n",
       "      <th>experience_level</th>\n",
       "      <th>employment_type</th>\n",
       "      <th>job_title</th>\n",
       "      <th>remote_ratio</th>\n",
       "      <th>company_location</th>\n",
       "      <th>company_size</th>\n",
       "      <th>salary_usd</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2023</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Principal Data Scientist</td>\n",
       "      <td>100</td>\n",
       "      <td>ES</td>\n",
       "      <td>3</td>\n",
       "      <td>97600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2023</td>\n",
       "      <td>MI</td>\n",
       "      <td>2</td>\n",
       "      <td>ML Engineer</td>\n",
       "      <td>100</td>\n",
       "      <td>US</td>\n",
       "      <td>1</td>\n",
       "      <td>30000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2023</td>\n",
       "      <td>MI</td>\n",
       "      <td>2</td>\n",
       "      <td>ML Engineer</td>\n",
       "      <td>100</td>\n",
       "      <td>US</td>\n",
       "      <td>1</td>\n",
       "      <td>25500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2023</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>100</td>\n",
       "      <td>CA</td>\n",
       "      <td>2</td>\n",
       "      <td>175000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2023</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>100</td>\n",
       "      <td>CA</td>\n",
       "      <td>2</td>\n",
       "      <td>120000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3597</th>\n",
       "      <td>3749</td>\n",
       "      <td>2021</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Data Specialist</td>\n",
       "      <td>100</td>\n",
       "      <td>US</td>\n",
       "      <td>3</td>\n",
       "      <td>165000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3598</th>\n",
       "      <td>3753</td>\n",
       "      <td>2020</td>\n",
       "      <td>EN</td>\n",
       "      <td>2</td>\n",
       "      <td>Business Data Analyst</td>\n",
       "      <td>100</td>\n",
       "      <td>US</td>\n",
       "      <td>3</td>\n",
       "      <td>100000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3599</th>\n",
       "      <td>3754</td>\n",
       "      <td>2021</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Data Science Manager</td>\n",
       "      <td>50</td>\n",
       "      <td>IN</td>\n",
       "      <td>3</td>\n",
       "      <td>98000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3600</th>\n",
       "      <td>3755</td>\n",
       "      <td>2023</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>0</td>\n",
       "      <td>CA</td>\n",
       "      <td>2</td>\n",
       "      <td>219000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3601</th>\n",
       "      <td>3756</td>\n",
       "      <td>2023</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>0</td>\n",
       "      <td>CA</td>\n",
       "      <td>2</td>\n",
       "      <td>141000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3602 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Unnamed: 0  work_year experience_level  employment_type  \\\n",
       "0              0       2023               SE                1   \n",
       "1              1       2023               MI                2   \n",
       "2              2       2023               MI                2   \n",
       "3              3       2023               SE                1   \n",
       "4              4       2023               SE                1   \n",
       "...          ...        ...              ...              ...   \n",
       "3597        3749       2021               SE                1   \n",
       "3598        3753       2020               EN                2   \n",
       "3599        3754       2021               SE                1   \n",
       "3600        3755       2023               SE                1   \n",
       "3601        3756       2023               SE                1   \n",
       "\n",
       "                     job_title  remote_ratio company_location  company_size  \\\n",
       "0     Principal Data Scientist           100               ES             3   \n",
       "1                  ML Engineer           100               US             1   \n",
       "2                  ML Engineer           100               US             1   \n",
       "3               Data Scientist           100               CA             2   \n",
       "4               Data Scientist           100               CA             2   \n",
       "...                        ...           ...              ...           ...   \n",
       "3597           Data Specialist           100               US             3   \n",
       "3598     Business Data Analyst           100               US             3   \n",
       "3599      Data Science Manager            50               IN             3   \n",
       "3600            Data Scientist             0               CA             2   \n",
       "3601            Data Scientist             0               CA             2   \n",
       "\n",
       "      salary_usd  \n",
       "0        97600.0  \n",
       "1        30000.0  \n",
       "2        25500.0  \n",
       "3       175000.0  \n",
       "4       120000.0  \n",
       "...          ...  \n",
       "3597    165000.0  \n",
       "3598    100000.0  \n",
       "3599     98000.0  \n",
       "3600    219000.0  \n",
       "3601    141000.0  \n",
       "\n",
       "[3602 rows x 9 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef0ba8ba",
   "metadata": {},
   "source": [
    "# Drop the columns that we don't need "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "ec83649c",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"['salary', 'salary_currency', 'employee_residence'] not found in axis\"",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[49], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m df\u001b[38;5;241m=\u001b[39m\u001b[43mdf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43msalary\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43msalary_currency\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43memployee_residence\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32mD:\\data\\lib\\site-packages\\pandas\\util\\_decorators.py:331\u001b[0m, in \u001b[0;36mdeprecate_nonkeyword_arguments.<locals>.decorate.<locals>.wrapper\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m    325\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(args) \u001b[38;5;241m>\u001b[39m num_allow_args:\n\u001b[0;32m    326\u001b[0m     warnings\u001b[38;5;241m.\u001b[39mwarn(\n\u001b[0;32m    327\u001b[0m         msg\u001b[38;5;241m.\u001b[39mformat(arguments\u001b[38;5;241m=\u001b[39m_format_argument_list(allow_args)),\n\u001b[0;32m    328\u001b[0m         \u001b[38;5;167;01mFutureWarning\u001b[39;00m,\n\u001b[0;32m    329\u001b[0m         stacklevel\u001b[38;5;241m=\u001b[39mfind_stack_level(),\n\u001b[0;32m    330\u001b[0m     )\n\u001b[1;32m--> 331\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m func(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32mD:\\data\\lib\\site-packages\\pandas\\core\\frame.py:5399\u001b[0m, in \u001b[0;36mDataFrame.drop\u001b[1;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[0;32m   5251\u001b[0m \u001b[38;5;129m@deprecate_nonkeyword_arguments\u001b[39m(version\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, allowed_args\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mself\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mlabels\u001b[39m\u001b[38;5;124m\"\u001b[39m])\n\u001b[0;32m   5252\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mdrop\u001b[39m(  \u001b[38;5;66;03m# type: ignore[override]\u001b[39;00m\n\u001b[0;32m   5253\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   5260\u001b[0m     errors: IgnoreRaise \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraise\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m   5261\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m DataFrame \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m   5262\u001b[0m     \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m   5263\u001b[0m \u001b[38;5;124;03m    Drop specified labels from rows or columns.\u001b[39;00m\n\u001b[0;32m   5264\u001b[0m \n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   5397\u001b[0m \u001b[38;5;124;03m            weight  1.0     0.8\u001b[39;00m\n\u001b[0;32m   5398\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m-> 5399\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m   5400\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlabels\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   5401\u001b[0m \u001b[43m        \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   5402\u001b[0m \u001b[43m        \u001b[49m\u001b[43mindex\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mindex\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   5403\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   5404\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlevel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlevel\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   5405\u001b[0m \u001b[43m        \u001b[49m\u001b[43minplace\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minplace\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   5406\u001b[0m \u001b[43m        \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   5407\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32mD:\\data\\lib\\site-packages\\pandas\\util\\_decorators.py:331\u001b[0m, in \u001b[0;36mdeprecate_nonkeyword_arguments.<locals>.decorate.<locals>.wrapper\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m    325\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(args) \u001b[38;5;241m>\u001b[39m num_allow_args:\n\u001b[0;32m    326\u001b[0m     warnings\u001b[38;5;241m.\u001b[39mwarn(\n\u001b[0;32m    327\u001b[0m         msg\u001b[38;5;241m.\u001b[39mformat(arguments\u001b[38;5;241m=\u001b[39m_format_argument_list(allow_args)),\n\u001b[0;32m    328\u001b[0m         \u001b[38;5;167;01mFutureWarning\u001b[39;00m,\n\u001b[0;32m    329\u001b[0m         stacklevel\u001b[38;5;241m=\u001b[39mfind_stack_level(),\n\u001b[0;32m    330\u001b[0m     )\n\u001b[1;32m--> 331\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m func(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32mD:\\data\\lib\\site-packages\\pandas\\core\\generic.py:4505\u001b[0m, in \u001b[0;36mNDFrame.drop\u001b[1;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[0;32m   4503\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m axis, labels \u001b[38;5;129;01min\u001b[39;00m axes\u001b[38;5;241m.\u001b[39mitems():\n\u001b[0;32m   4504\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m labels \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m-> 4505\u001b[0m         obj \u001b[38;5;241m=\u001b[39m \u001b[43mobj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_drop_axis\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlevel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlevel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   4507\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m inplace:\n\u001b[0;32m   4508\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_update_inplace(obj)\n",
      "File \u001b[1;32mD:\\data\\lib\\site-packages\\pandas\\core\\generic.py:4546\u001b[0m, in \u001b[0;36mNDFrame._drop_axis\u001b[1;34m(self, labels, axis, level, errors, only_slice)\u001b[0m\n\u001b[0;32m   4544\u001b[0m         new_axis \u001b[38;5;241m=\u001b[39m axis\u001b[38;5;241m.\u001b[39mdrop(labels, level\u001b[38;5;241m=\u001b[39mlevel, errors\u001b[38;5;241m=\u001b[39merrors)\n\u001b[0;32m   4545\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m-> 4546\u001b[0m         new_axis \u001b[38;5;241m=\u001b[39m \u001b[43maxis\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   4547\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m axis\u001b[38;5;241m.\u001b[39mget_indexer(new_axis)\n\u001b[0;32m   4549\u001b[0m \u001b[38;5;66;03m# Case for non-unique axis\u001b[39;00m\n\u001b[0;32m   4550\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "File \u001b[1;32mD:\\data\\lib\\site-packages\\pandas\\core\\indexes\\base.py:6934\u001b[0m, in \u001b[0;36mIndex.drop\u001b[1;34m(self, labels, errors)\u001b[0m\n\u001b[0;32m   6932\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m mask\u001b[38;5;241m.\u001b[39many():\n\u001b[0;32m   6933\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m errors \u001b[38;5;241m!=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mignore\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m-> 6934\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlist\u001b[39m(labels[mask])\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m not found in axis\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m   6935\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m indexer[\u001b[38;5;241m~\u001b[39mmask]\n\u001b[0;32m   6936\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdelete(indexer)\n",
      "\u001b[1;31mKeyError\u001b[0m: \"['salary', 'salary_currency', 'employee_residence'] not found in axis\""
     ]
    }
   ],
   "source": [
    "df=df.drop(['salary','salary_currency','employee_residence'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "0c1a3b81",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>work_year</th>\n",
       "      <th>experience_level</th>\n",
       "      <th>employment_type</th>\n",
       "      <th>job_title</th>\n",
       "      <th>remote_ratio</th>\n",
       "      <th>company_location</th>\n",
       "      <th>company_size</th>\n",
       "      <th>salary_usd</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2023</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Principal Data Scientist</td>\n",
       "      <td>100</td>\n",
       "      <td>ES</td>\n",
       "      <td>3</td>\n",
       "      <td>97600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2023</td>\n",
       "      <td>MI</td>\n",
       "      <td>2</td>\n",
       "      <td>ML Engineer</td>\n",
       "      <td>100</td>\n",
       "      <td>US</td>\n",
       "      <td>1</td>\n",
       "      <td>30000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2023</td>\n",
       "      <td>MI</td>\n",
       "      <td>2</td>\n",
       "      <td>ML Engineer</td>\n",
       "      <td>100</td>\n",
       "      <td>US</td>\n",
       "      <td>1</td>\n",
       "      <td>25500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2023</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>100</td>\n",
       "      <td>CA</td>\n",
       "      <td>2</td>\n",
       "      <td>175000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2023</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>100</td>\n",
       "      <td>CA</td>\n",
       "      <td>2</td>\n",
       "      <td>120000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3597</th>\n",
       "      <td>3749</td>\n",
       "      <td>2021</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Data Specialist</td>\n",
       "      <td>100</td>\n",
       "      <td>US</td>\n",
       "      <td>3</td>\n",
       "      <td>165000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3598</th>\n",
       "      <td>3753</td>\n",
       "      <td>2020</td>\n",
       "      <td>EN</td>\n",
       "      <td>2</td>\n",
       "      <td>Business Data Analyst</td>\n",
       "      <td>100</td>\n",
       "      <td>US</td>\n",
       "      <td>3</td>\n",
       "      <td>100000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3599</th>\n",
       "      <td>3754</td>\n",
       "      <td>2021</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Data Science Manager</td>\n",
       "      <td>50</td>\n",
       "      <td>IN</td>\n",
       "      <td>3</td>\n",
       "      <td>98000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3600</th>\n",
       "      <td>3755</td>\n",
       "      <td>2023</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>0</td>\n",
       "      <td>CA</td>\n",
       "      <td>2</td>\n",
       "      <td>219000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3601</th>\n",
       "      <td>3756</td>\n",
       "      <td>2023</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>0</td>\n",
       "      <td>CA</td>\n",
       "      <td>2</td>\n",
       "      <td>141000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3602 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Unnamed: 0  work_year experience_level  employment_type  \\\n",
       "0              0       2023               SE                1   \n",
       "1              1       2023               MI                2   \n",
       "2              2       2023               MI                2   \n",
       "3              3       2023               SE                1   \n",
       "4              4       2023               SE                1   \n",
       "...          ...        ...              ...              ...   \n",
       "3597        3749       2021               SE                1   \n",
       "3598        3753       2020               EN                2   \n",
       "3599        3754       2021               SE                1   \n",
       "3600        3755       2023               SE                1   \n",
       "3601        3756       2023               SE                1   \n",
       "\n",
       "                     job_title  remote_ratio company_location  company_size  \\\n",
       "0     Principal Data Scientist           100               ES             3   \n",
       "1                  ML Engineer           100               US             1   \n",
       "2                  ML Engineer           100               US             1   \n",
       "3               Data Scientist           100               CA             2   \n",
       "4               Data Scientist           100               CA             2   \n",
       "...                        ...           ...              ...           ...   \n",
       "3597           Data Specialist           100               US             3   \n",
       "3598     Business Data Analyst           100               US             3   \n",
       "3599      Data Science Manager            50               IN             3   \n",
       "3600            Data Scientist             0               CA             2   \n",
       "3601            Data Scientist             0               CA             2   \n",
       "\n",
       "      salary_usd  \n",
       "0        97600.0  \n",
       "1        30000.0  \n",
       "2        25500.0  \n",
       "3       175000.0  \n",
       "4       120000.0  \n",
       "...          ...  \n",
       "3597    165000.0  \n",
       "3598    100000.0  \n",
       "3599     98000.0  \n",
       "3600    219000.0  \n",
       "3601    141000.0  \n",
       "\n",
       "[3602 rows x 9 columns]"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "749cdba3",
   "metadata": {},
   "source": [
    "# Show employment types "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "3890d039",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3, 4], dtype=int64)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['employment_type'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54332c62",
   "metadata": {},
   "source": [
    "# Incoding employment types and convert it to numbers "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "2516c575",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['employment_type'] = df['employment_type'].replace({'FT': 1, 'CT': 2, 'FL': 3, 'PT': 4})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "7cae9f05",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>work_year</th>\n",
       "      <th>experience_level</th>\n",
       "      <th>employment_type</th>\n",
       "      <th>job_title</th>\n",
       "      <th>remote_ratio</th>\n",
       "      <th>company_location</th>\n",
       "      <th>company_size</th>\n",
       "      <th>salary_usd</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2023</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Principal Data Scientist</td>\n",
       "      <td>100</td>\n",
       "      <td>ES</td>\n",
       "      <td>3</td>\n",
       "      <td>97600.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2023</td>\n",
       "      <td>MI</td>\n",
       "      <td>2</td>\n",
       "      <td>ML Engineer</td>\n",
       "      <td>100</td>\n",
       "      <td>US</td>\n",
       "      <td>1</td>\n",
       "      <td>30000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2023</td>\n",
       "      <td>MI</td>\n",
       "      <td>2</td>\n",
       "      <td>ML Engineer</td>\n",
       "      <td>100</td>\n",
       "      <td>US</td>\n",
       "      <td>1</td>\n",
       "      <td>25500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2023</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>100</td>\n",
       "      <td>CA</td>\n",
       "      <td>2</td>\n",
       "      <td>175000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2023</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>100</td>\n",
       "      <td>CA</td>\n",
       "      <td>2</td>\n",
       "      <td>120000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3597</th>\n",
       "      <td>3749</td>\n",
       "      <td>2021</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Data Specialist</td>\n",
       "      <td>100</td>\n",
       "      <td>US</td>\n",
       "      <td>3</td>\n",
       "      <td>165000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3598</th>\n",
       "      <td>3753</td>\n",
       "      <td>2020</td>\n",
       "      <td>EN</td>\n",
       "      <td>2</td>\n",
       "      <td>Business Data Analyst</td>\n",
       "      <td>100</td>\n",
       "      <td>US</td>\n",
       "      <td>3</td>\n",
       "      <td>100000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3599</th>\n",
       "      <td>3754</td>\n",
       "      <td>2021</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Data Science Manager</td>\n",
       "      <td>50</td>\n",
       "      <td>IN</td>\n",
       "      <td>3</td>\n",
       "      <td>98000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3600</th>\n",
       "      <td>3755</td>\n",
       "      <td>2023</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>0</td>\n",
       "      <td>CA</td>\n",
       "      <td>2</td>\n",
       "      <td>219000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3601</th>\n",
       "      <td>3756</td>\n",
       "      <td>2023</td>\n",
       "      <td>SE</td>\n",
       "      <td>1</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>0</td>\n",
       "      <td>CA</td>\n",
       "      <td>2</td>\n",
       "      <td>141000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3602 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Unnamed: 0  work_year experience_level  employment_type  \\\n",
       "0              0       2023               SE                1   \n",
       "1              1       2023               MI                2   \n",
       "2              2       2023               MI                2   \n",
       "3              3       2023               SE                1   \n",
       "4              4       2023               SE                1   \n",
       "...          ...        ...              ...              ...   \n",
       "3597        3749       2021               SE                1   \n",
       "3598        3753       2020               EN                2   \n",
       "3599        3754       2021               SE                1   \n",
       "3600        3755       2023               SE                1   \n",
       "3601        3756       2023               SE                1   \n",
       "\n",
       "                     job_title  remote_ratio company_location  company_size  \\\n",
       "0     Principal Data Scientist           100               ES             3   \n",
       "1                  ML Engineer           100               US             1   \n",
       "2                  ML Engineer           100               US             1   \n",
       "3               Data Scientist           100               CA             2   \n",
       "4               Data Scientist           100               CA             2   \n",
       "...                        ...           ...              ...           ...   \n",
       "3597           Data Specialist           100               US             3   \n",
       "3598     Business Data Analyst           100               US             3   \n",
       "3599      Data Science Manager            50               IN             3   \n",
       "3600            Data Scientist             0               CA             2   \n",
       "3601            Data Scientist             0               CA             2   \n",
       "\n",
       "      salary_usd  \n",
       "0        97600.0  \n",
       "1        30000.0  \n",
       "2        25500.0  \n",
       "3       175000.0  \n",
       "4       120000.0  \n",
       "...          ...  \n",
       "3597    165000.0  \n",
       "3598    100000.0  \n",
       "3599     98000.0  \n",
       "3600    219000.0  \n",
       "3601    141000.0  \n",
       "\n",
       "[3602 rows x 9 columns]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a000f7d1",
   "metadata": {},
   "source": [
    "# Making box plot between salary in usd and experience level"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "578e0760",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df['salary_usd'],df['experience_level'] )\n",
    "plt.ylabel('Experience Level')\n",
    "plt.xlabel('Salary (USD)')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7f9a935",
   "metadata": {},
   "source": [
    "# Calculate IQR and Outlier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "03c44e63",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of outliers: 0\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# calculate the IQR and outlier range\n",
    "q1 = df['salary_usd'].quantile(0.25)\n",
    "q3 = df['salary_usd'].quantile(0.75)\n",
    "iqr = q3 - q1\n",
    "outlier_range = (q1 - 1.5*iqr, q3 + 1.5*iqr)\n",
    "\n",
    "# count the number of outliers\n",
    "num_outliers = np.sum((df['salary_usd'] < outlier_range[0]) | (df['salary_usd'] > outlier_range[1]))\n",
    "\n",
    "# print the number of outliers\n",
    "print('Number of outliers:', num_outliers)# Import Important lib"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f633da74",
   "metadata": {},
   "source": [
    "# Remove outliers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "f70504c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.loc[(df['salary_usd'] >= outlier_range[0]) & (df['salary_usd'] <= outlier_range[1])]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e29a3ae4",
   "metadata": {},
   "source": [
    "# Reploting after removing outliers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "0582fa3d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df['salary_usd'],df['experience_level'] )\n",
    "plt.ylabel('Experience Level')\n",
    "plt.xlabel('Salary (USD)')\n",
    "plt.show()# Import Important lib"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e76a1dd",
   "metadata": {},
   "source": [
    "# Calculate statistical measures of all data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "a57f4b13",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>work_year</th>\n",
       "      <th>employment_type</th>\n",
       "      <th>remote_ratio</th>\n",
       "      <th>company_size</th>\n",
       "      <th>salary_usd</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3602.000000</td>\n",
       "      <td>3602.000000</td>\n",
       "      <td>3602.000000</td>\n",
       "      <td>3602.000000</td>\n",
       "      <td>3602.000000</td>\n",
       "      <td>3602.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1852.529428</td>\n",
       "      <td>2022.383676</td>\n",
       "      <td>1.022488</td>\n",
       "      <td>46.210439</td>\n",
       "      <td>2.078845</td>\n",
       "      <td>135573.368581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1073.904152</td>\n",
       "      <td>0.689058</td>\n",
       "      <td>0.236363</td>\n",
       "      <td>48.586726</td>\n",
       "      <td>0.388536</td>\n",
       "      <td>56694.356651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>2020.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5520.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>924.250000</td>\n",
       "      <td>2022.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>98000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1848.500000</td>\n",
       "      <td>2022.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>135000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2760.750000</td>\n",
       "      <td>2023.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>175000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3756.000000</td>\n",
       "      <td>2023.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>289076.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Unnamed: 0    work_year  employment_type  remote_ratio  company_size  \\\n",
       "count  3602.000000  3602.000000      3602.000000   3602.000000   3602.000000   \n",
       "mean   1852.529428  2022.383676         1.022488     46.210439      2.078845   \n",
       "std    1073.904152     0.689058         0.236363     48.586726      0.388536   \n",
       "min       0.000000  2020.000000         1.000000      0.000000      1.000000   \n",
       "25%     924.250000  2022.000000         1.000000      0.000000      2.000000   \n",
       "50%    1848.500000  2022.000000         1.000000      0.000000      2.000000   \n",
       "75%    2760.750000  2023.000000         1.000000    100.000000      2.000000   \n",
       "max    3756.000000  2023.000000         4.000000    100.000000      3.000000   \n",
       "\n",
       "          salary_usd  \n",
       "count    3602.000000  \n",
       "mean   135573.368581  \n",
       "std     56694.356651  \n",
       "min      5520.000000  \n",
       "25%     98000.000000  \n",
       "50%    135000.000000  \n",
       "75%    175000.000000  \n",
       "max    289076.000000  "
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "e102bf73",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.to_csv(\"AfterPreProsccing\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "308da3b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of outliers: 0\n"
     ]
    }
   ],
   "source": [
    "# calculate the IQR and outlier range\n",
    "q1 = df['salary_usd'].quantile(0.25)\n",
    "q3 = df['salary_usd'].quantile(0.75)\n",
    "iqr = q3 - q1\n",
    "outlier_range = (q1 - 1.5*iqr, q3 + 1.5*iqr)\n",
    "\n",
    "# count the number of outliers\n",
    "num_outliers = np.sum((df['salary_usd'] < outlier_range[0]) | (df['salary_usd'] > outlier_range[1]))\n",
    "\n",
    "# print the number of outliers\n",
    "print('Number of outliers:', num_outliers)# Import Important lib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "27fa3500",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "range is 3\n"
     ]
    }
   ],
   "source": [
    "print (\"range is\", df[ 'work_year'].max () - df[ 'work_year'].min ())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "59855bbe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 4 distinct values in the 'experience_level' column.\n"
     ]
    }
   ],
   "source": [
    "num_distinct_experience_levels = df['experience_level'].nunique()\n",
    "\n",
    "print(\"There are\", num_distinct_experience_levels, \"distinct values in the 'experience_level' column.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "ef612dc4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The different employment types listed in the 'employment_type' column are:\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "employment_types = df['employment_type'].unique()\n",
    "\n",
    "print(\"The different employment types listed in the 'employment_type' column are:\")\n",
    "for emp_type in employment_types:\n",
    "    print(emp_type)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "77e5e01e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The average company size listed in this dataset is: 2.078845086063298\n"
     ]
    }
   ],
   "source": [
    "average_company_size = df['company_size'].mean()\n",
    "print(\"The average company size listed in this dataset is:\", average_company_size)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "ba1ff2d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The highest salary listed in this dataset is: 289076.0\n"
     ]
    }
   ],
   "source": [
    "highest_salary = df['salary_usd'].max()\n",
    "\n",
    "print(\"The highest salary listed in this dataset is:\", highest_salary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "cf39251a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The lowest salary listed in this dataset is: 5520.0\n"
     ]
    }
   ],
   "source": [
    "lowest_salary = df['salary_usd'].min()\n",
    "\n",
    "print(\"The lowest salary listed in this dataset is:\", lowest_salary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "4f939eef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The median salary listed in this dataset is: 135000.0\n"
     ]
    }
   ],
   "source": [
    "median_salary = df['salary_usd'].median()\n",
    "\n",
    "print(\"The median salary listed in this dataset is:\", median_salary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "66df2e0a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 91 different job titles listed in this dataset.\n"
     ]
    }
   ],
   "source": [
    "num_job_titles = df['job_title'].nunique()\n",
    "\n",
    "print(\"There are\", num_job_titles, \"different job titles listed in this dataset.\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "956ac9a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The most commonly listed job title in this dataset is: Data Engineer\n"
     ]
    }
   ],
   "source": [
    "job_title_counts = df['job_title'].value_counts()\n",
    "most_common_job_title = job_title_counts.index[0]\n",
    "\n",
    "print(\"The most commonly listed job title in this dataset is:\", most_common_job_title)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "17b52470",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of jobs located in Europe: 0\n"
     ]
    }
   ],
   "source": [
    "europe_jobs = df[df['company_location'].str.contains('Europe')]\n",
    "num_europe_jobs = len(europe_jobs)\n",
    "\n",
    "print(\"Number of jobs located in Europe:\", num_europe_jobs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "81e2a9b4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of job titles listed only once: 17\n"
     ]
    }
   ],
   "source": [
    "job_title_counts = df['job_title'].value_counts()\n",
    "unique_job_titles = job_title_counts[job_title_counts == 1]\n",
    "num_unique_job_titles = len(unique_job_titles)\n",
    "print(\"Number of job titles listed only once:\", num_unique_job_titles)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "ee292416",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Most common employment type: 1\n"
     ]
    }
   ],
   "source": [
    "employment_type_counts = df['employment_type'].value_counts()\n",
    "most_common_employment_type = employment_type_counts.index[0]\n",
    "\n",
    "print(\"Most common employment type:\", most_common_employment_type)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "83a1e360",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Most common remote ratio: 0\n"
     ]
    }
   ],
   "source": [
    "remote_ratio_counts = df['remote_ratio'].value_counts()\n",
    "most_common_remote_ratio = remote_ratio_counts.index[0]\n",
    "\n",
    "print(\"Most common remote ratio:\", most_common_remote_ratio)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "77197eb3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of companies that appear more than once: 48\n"
     ]
    }
   ],
   "source": [
    "company_counts = df['company_location'].value_counts()\n",
    "duplicated_companies = company_counts[company_counts > 1]\n",
    "num_duplicated_companies = len(duplicated_companies)\n",
    "print(\"Number of companies that appear more than once:\", num_duplicated_companies)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "39581016",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df['salary_usd'], bins=20)\n",
    "plt.xlabel('Salary (USD)')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Distribution of Salaries in Dataset')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "8e0f3f02",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average number of years of experience required: 2022.3836757357024\n"
     ]
    }
   ],
   "source": [
    "df['work_year'] = pd.to_numeric(df['work_year'], errors='coerce')\n",
    "avg_experience_years = df['work_year'].mean()\n",
    "\n",
    "print(\"Average number of years of experience required:\", avg_experience_years)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "9cac99ce",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of contract positions: 0\n"
     ]
    }
   ],
   "source": [
    "contract_positions = df[df['employment_type'] == 'CT']\n",
    "num_contract_positions = len(contract_positions)\n",
    "\n",
    "print(\"Number of contract positions:\", num_contract_positions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "f49ac6df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of jobs located in the United States: 2928\n"
     ]
    }
   ],
   "source": [
    "us_jobs = df[df['company_location'].str.contains('United States|US')]\n",
    "num_us_jobs = len(us_jobs)\n",
    "\n",
    "print(\"Number of jobs located in the United States:\", num_us_jobs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "babb9ec1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of jobs located in the India: 57\n"
     ]
    }
   ],
   "source": [
    "us_jobs = df[df['company_location'].str.contains('India|IN')]\n",
    "num_us_jobs = len(us_jobs)\n",
    "\n",
    "print(\"Number of jobs located in the India:\", num_us_jobs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "6e430bc8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Location with the most jobs available: US\n"
     ]
    }
   ],
   "source": [
    "\n",
    "location_counts = df['company_location'].value_counts()\n",
    "most_common_location = location_counts.index[0]\n",
    "\n",
    "print(\"Location with the most jobs available:\", most_common_location)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2e09126a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46743ead",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "65644e79",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "67dd6e81",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
